#![warn(
    missing_docs, // Предупреждать об отсутствующей документации
    clippy::all, // Все проверки clippy
    clippy::pedantic, // Более строгие проверки clippy
    clippy::nursery, // Экспериментальные проверки clippy
    clippy::unwrap_used, // Предупреждать об использовании .unwrap()
    clippy::expect_used // Предупреждать об использовании .expect()
)]
#![deny(
    unsafe_code, // Запретить небезопасный код
    unused_mut, // Запретить неиспользуемые изменяемые переменные
    // unused_variables, // Можно временно закомментировать при активной разработке
    // unused_imports, // Также можно временно закомментировать
    unused_attributes // Запретить неиспользуемые атрибуты
)]

//! Крейт `model_loader` предоставляет функциональность для загрузки моделей Машинного Обучения,
//! их конфигураций и весов из локальной файловой системы в формате SafeTensors.
//! Он специально адаптирован для использования с фреймворком глубокого обучения `burn`.
//!
//! **Принцип работы**: Этот модуль работает строго в оффлайн-режиме, загружая все
//! необходимые файлы модели с локального диска. Он не выполняет никаких сетевых запросов
//! и ожидает модели в их **чистом, неквантованном, sharded (разделенном на части) формате SafeTensors**.

// Публичные модули крейта
pub mod error; // Модуль для определения кастомных ошибок
pub mod loader; // Модуль с основной логикой загрузки моделей
pub mod types; // Модуль с определениями типов данных (конфигурации, информация о модели)
pub mod validation; // Модуль для валидации конфигураций моделей

// Реэкспорт ключевых публичных элементов для удобства использования крейта
pub use error::ModelLoaderError; // Тип ошибки загрузчика
pub use loader::ModelLoader; // Основной загрузчик моделей

// Реэкспорт типов данных, используемых для конфигурации и информации о модели.
// RawQuantizedModelConfig был удален, так как квантование не поддерживается.
pub use types::{
    AppendedText, // Тип для добавляемого текста (к промпту)
    CoreGemmaModelConfig, // Основная конфигурация модели Gemma, используемая ядром
    ModelInfo, // Информация о загруженной модели
    ModelType, // Перечисление поддерживаемых типов моделей
    RawModelConfig, // "Сырая" конфигурация модели, как она загружается из config.json
};

// Эти use нужны, если типы из half/bytemuck используются в публичном API этого крейта
// или если нужно гарантировать их компиляцию при включении фичи.
// В текущей реализации loader.rs они не используются напрямую в lib.rs,
// но оставлены для возможного будущего расширения поддержки f16/bf16.
#[cfg(feature = "with_f16_bf16_support")]
use half; // Подавление предупреждения о неиспользуемом импорте
#[cfg(feature = "with_f16_bf16_support")]
use bytemuck; // Аналогично
